// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: service/hupu.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HupuService_ListRaceTypes_FullMethodName = "/service.HupuService/ListRaceTypes"
)

// HupuServiceClient is the client API for HupuService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HupuServiceClient interface {
	ListRaceTypes(ctx context.Context, in *ListRaceTypesReq, opts ...grpc.CallOption) (*ListRaceTypesRsp, error)
}

type hupuServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHupuServiceClient(cc grpc.ClientConnInterface) HupuServiceClient {
	return &hupuServiceClient{cc}
}

func (c *hupuServiceClient) ListRaceTypes(ctx context.Context, in *ListRaceTypesReq, opts ...grpc.CallOption) (*ListRaceTypesRsp, error) {
	out := new(ListRaceTypesRsp)
	err := c.cc.Invoke(ctx, HupuService_ListRaceTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HupuServiceServer is the server API for HupuService service.
// All implementations must embed UnimplementedHupuServiceServer
// for forward compatibility
type HupuServiceServer interface {
	ListRaceTypes(context.Context, *ListRaceTypesReq) (*ListRaceTypesRsp, error)
	mustEmbedUnimplementedHupuServiceServer()
}

// UnimplementedHupuServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHupuServiceServer struct {
}

func (UnimplementedHupuServiceServer) ListRaceTypes(context.Context, *ListRaceTypesReq) (*ListRaceTypesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRaceTypes not implemented")
}
func (UnimplementedHupuServiceServer) mustEmbedUnimplementedHupuServiceServer() {}

// UnsafeHupuServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HupuServiceServer will
// result in compilation errors.
type UnsafeHupuServiceServer interface {
	mustEmbedUnimplementedHupuServiceServer()
}

func RegisterHupuServiceServer(s grpc.ServiceRegistrar, srv HupuServiceServer) {
	s.RegisterService(&HupuService_ServiceDesc, srv)
}

func _HupuService_ListRaceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRaceTypesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HupuServiceServer).ListRaceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HupuService_ListRaceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HupuServiceServer).ListRaceTypes(ctx, req.(*ListRaceTypesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HupuService_ServiceDesc is the grpc.ServiceDesc for HupuService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HupuService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.HupuService",
	HandlerType: (*HupuServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRaceTypes",
			Handler:    _HupuService_ListRaceTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/hupu.proto",
}
